Index: notebooks/model_v1_quim.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 2,\r\n   \"id\": \"89c345d6\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"import pandas as pd\\n\",\r\n    \"import os\\n\",\r\n    \"import numpy as np\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 101,\r\n   \"id\": \"3fed2a73\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# bank_holidays_bcn = pd.read_csv(\\\"../data/bank_holidays_bcn.csv\\\")\\n\",\r\n    \"# bank_holidays_bcn[\\\"holiday_date\\\"] = pd.to_datetime(bank_holidays_bcn[[\\\"year\\\", \\\"month\\\", \\\"day\\\"]]).dt.date\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 4,\r\n   \"id\": \"17b2fe91\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"prediction_raw_data = pd.read_parquet(\\\"../data/prediction_raw_data.parquet\\\")\\n\",\r\n    \"prediction_data = pd.read_parquet(\\\"../data/prediction_data.parquet\\\")\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 5,\r\n   \"id\": \"9eee92ad\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/html\": [\r\n       \"<div>\\n\",\r\n       \"<style scoped>\\n\",\r\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\r\n       \"        vertical-align: middle;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe tbody tr th {\\n\",\r\n       \"        vertical-align: top;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe thead th {\\n\",\r\n       \"        text-align: right;\\n\",\r\n       \"    }\\n\",\r\n       \"</style>\\n\",\r\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\r\n       \"  <thead>\\n\",\r\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\r\n       \"      <th></th>\\n\",\r\n       \"      <th>station_id</th>\\n\",\r\n       \"      <th>year</th>\\n\",\r\n       \"      <th>month</th>\\n\",\r\n       \"      <th>day</th>\\n\",\r\n       \"      <th>hour</th>\\n\",\r\n       \"      <th>percentage_docks_available</th>\\n\",\r\n       \"      <th>ctx-1</th>\\n\",\r\n       \"      <th>ctx-2</th>\\n\",\r\n       \"      <th>ctx-3</th>\\n\",\r\n       \"      <th>ctx-4</th>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </thead>\\n\",\r\n       \"  <tbody>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>0</th>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>2020</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>0.346296</td>\\n\",\r\n       \"      <td>0.394444</td>\\n\",\r\n       \"      <td>0.459259</td>\\n\",\r\n       \"      <td>0.492593</td>\\n\",\r\n       \"      <td>0.511111</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>1</th>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>2020</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>0.235185</td>\\n\",\r\n       \"      <td>0.233333</td>\\n\",\r\n       \"      <td>0.298148</td>\\n\",\r\n       \"      <td>0.364815</td>\\n\",\r\n       \"      <td>0.283333</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>2</th>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>2020</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>0.385185</td>\\n\",\r\n       \"      <td>0.337037</td>\\n\",\r\n       \"      <td>0.342593</td>\\n\",\r\n       \"      <td>0.262963</td>\\n\",\r\n       \"      <td>0.248148</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3</th>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>2020</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>17</td>\\n\",\r\n       \"      <td>0.177778</td>\\n\",\r\n       \"      <td>0.211111</td>\\n\",\r\n       \"      <td>0.244444</td>\\n\",\r\n       \"      <td>0.335185</td>\\n\",\r\n       \"      <td>0.381481</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>4</th>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>2020</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>22</td>\\n\",\r\n       \"      <td>0.450000</td>\\n\",\r\n       \"      <td>0.492593</td>\\n\",\r\n       \"      <td>0.418519</td>\\n\",\r\n       \"      <td>0.209259</td>\\n\",\r\n       \"      <td>0.079630</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>...</th>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3305301</th>\\n\",\r\n       \"      <td>532</td>\\n\",\r\n       \"      <td>2022</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3305302</th>\\n\",\r\n       \"      <td>532</td>\\n\",\r\n       \"      <td>2022</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3305303</th>\\n\",\r\n       \"      <td>532</td>\\n\",\r\n       \"      <td>2022</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>19</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3305304</th>\\n\",\r\n       \"      <td>532</td>\\n\",\r\n       \"      <td>2022</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3305305</th>\\n\",\r\n       \"      <td>532</td>\\n\",\r\n       \"      <td>2022</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </tbody>\\n\",\r\n       \"</table>\\n\",\r\n       \"<p>3305306 rows Ã— 10 columns</p>\\n\",\r\n       \"</div>\"\r\n      ],\r\n      \"text/plain\": [\r\n       \"         station_id  year  month  day  hour  percentage_docks_available  \\\\\\n\",\r\n       \"0                 1  2020      1    1     2                    0.346296   \\n\",\r\n       \"1                 1  2020      1    1     7                    0.235185   \\n\",\r\n       \"2                 1  2020      1    1    12                    0.385185   \\n\",\r\n       \"3                 1  2020      1    1    17                    0.177778   \\n\",\r\n       \"4                 1  2020      1    1    22                    0.450000   \\n\",\r\n       \"...             ...   ...    ...  ...   ...                         ...   \\n\",\r\n       \"3305301         532  2022     11   12     9                         NaN   \\n\",\r\n       \"3305302         532  2022     11   12    14                         NaN   \\n\",\r\n       \"3305303         532  2022     11   12    19                         NaN   \\n\",\r\n       \"3305304         532  2022     11   13     0                         NaN   \\n\",\r\n       \"3305305         532  2022     11   13     5                         NaN   \\n\",\r\n       \"\\n\",\r\n       \"            ctx-1     ctx-2     ctx-3     ctx-4  \\n\",\r\n       \"0        0.394444  0.459259  0.492593  0.511111  \\n\",\r\n       \"1        0.233333  0.298148  0.364815  0.283333  \\n\",\r\n       \"2        0.337037  0.342593  0.262963  0.248148  \\n\",\r\n       \"3        0.211111  0.244444  0.335185  0.381481  \\n\",\r\n       \"4        0.492593  0.418519  0.209259  0.079630  \\n\",\r\n       \"...           ...       ...       ...       ...  \\n\",\r\n       \"3305301       NaN       NaN       NaN       NaN  \\n\",\r\n       \"3305302       NaN       NaN       NaN       NaN  \\n\",\r\n       \"3305303       NaN       NaN       NaN       NaN  \\n\",\r\n       \"3305304       NaN       NaN       NaN       NaN  \\n\",\r\n       \"3305305       NaN       NaN       NaN       NaN  \\n\",\r\n       \"\\n\",\r\n       \"[3305306 rows x 10 columns]\"\r\n      ]\r\n     },\r\n     \"execution_count\": 5,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"prediction_data\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 159,\r\n   \"id\": \"36fb03ae\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"prediction_data = pd.DataFrame()\\n\",\r\n    \"for s in prediction_raw_data.station_id.unique():\\n\",\r\n    \"    ctx = prediction_raw_data.loc[prediction_raw_data[\\\"station_id\\\"] == s, :]\\n\",\r\n    \"    ctx = ctx.sort_values(by=[\\\"year\\\", \\\"month\\\", \\\"day\\\", \\\"hour\\\"],\\n\",\r\n    \"                              ignore_index=True)\\n\",\r\n    \"    for lag in range(1, 5):\\n\",\r\n    \"        ctx.loc[:, f\\\"ctx-{lag}\\\"] = ctx.loc[:, \\\"percentage_docks_available\\\"].shift(lag)\\n\",\r\n    \"\\n\",\r\n    \"    ctx = ctx.iloc[4::5]\\n\",\r\n    \"\\n\",\r\n    \"    prediction_data = pd.concat([prediction_data, ctx], ignore_index=True)\\n\",\r\n    \"\\n\",\r\n    \"# Remove row where all lag variables are null\\n\",\r\n    \"prediction_data.dropna(subset=[\\\"ctx-1\\\", \\\"ctx-2\\\", \\\"ctx-3\\\", \\\"ctx-4\\\"],\\n\",\r\n    \"                       how=\\\"all\\\",\\n\",\r\n    \"                       inplace=True)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 161,\r\n   \"id\": \"3da9531d\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"\\n\",\r\n    \"prediction_data.dropna(subset=[\\\"percentage_docks_available\\\"],\\n\",\r\n    \"                       how=\\\"all\\\",\\n\",\r\n    \"                       inplace=True)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 163,\r\n   \"id\": \"f9b172ed\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"station_id                        0\\n\",\r\n       \"lat                               0\\n\",\r\n       \"lon                               0\\n\",\r\n       \"altitude                          0\\n\",\r\n       \"year                              0\\n\",\r\n       \"month                             0\\n\",\r\n       \"day                               0\\n\",\r\n       \"hour                              0\\n\",\r\n       \"num_docks_available               0\\n\",\r\n       \"capacity                          0\\n\",\r\n       \"percentage_docks_available        0\\n\",\r\n       \"datetime                          0\\n\",\r\n       \"date                              0\\n\",\r\n       \"is_holidays                       0\\n\",\r\n       \"ctx-1                          1314\\n\",\r\n       \"ctx-2                          4856\\n\",\r\n       \"ctx-3                          7506\\n\",\r\n       \"ctx-4                         11129\\n\",\r\n       \"dtype: int64\"\r\n      ]\r\n     },\r\n     \"execution_count\": 163,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"prediction_data.isna().sum()\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 164,\r\n   \"id\": \"cfaed87b\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"prediction_data.drop(columns=[\\\"datetime\\\",\\\"date\\\", \\\"num_docks_available\\\"],inplace=True)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 165,\r\n   \"id\": \"d6c0f57c\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"train = prediction_data[prediction_data['year']<2023]\\n\",\r\n    \"validation = prediction_data[prediction_data['year']>=2023]\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 166,\r\n   \"id\": \"4d4abbf0\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"x_train = train.drop(columns='percentage_docks_available')\\n\",\r\n    \"y_train = train['percentage_docks_available']\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"x_val = validation.drop(columns='percentage_docks_available')\\n\",\r\n    \"y_val = validation['percentage_docks_available']\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 174,\r\n   \"id\": \"6eefb847\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"(1986382, 399)\"\r\n      ]\r\n     },\r\n     \"execution_count\": 174,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"x_train.shape\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 175,\r\n   \"id\": \"df93fd98\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"(642635, 399)\"\r\n      ]\r\n     },\r\n     \"execution_count\": 175,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"x_val.shape\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 7,\r\n   \"id\": \"423a41db\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"from sklearn.base import BaseEstimator, TransformerMixin\\n\",\r\n    \"class CyclicalEncoder(BaseEstimator, TransformerMixin):\\n\",\r\n    \"    def __inint_(self, max_val:float):\\n\",\r\n    \"        self.max_val = max_val\\n\",\r\n    \"    \\n\",\r\n    \"    def fit(self):\\n\",\r\n    \"        return self\\n\",\r\n    \"    \\n\",\r\n    \"    def transform(self,data):\\n\",\r\n    \"        for column in data.columns:\\n\",\r\n    \"            data[\\\"column\\\"+\\\"_sin\\\"] = np.sin(2*np.pi*data[column]/ self.max_val)\\n\",\r\n    \"            data[\\\"column\\\"+\\\"_cos\\\"] = np.cos(2*np.pi*data[column]/ self.max_val)\\n\",\r\n    \"        return data\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 167,\r\n   \"id\": \"ae94d5cf\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"from sklearn.compose import ColumnTransformer\\n\",\r\n    \"from sklearn.preprocessing import OneHotEncoder\\n\",\r\n    \"\\n\",\r\n    \"transformer = ColumnTransformer(\\n\",\r\n    \"    transformers=[\\n\",\r\n    \"        ('onehot', OneHotEncoder(handle_unknown=\\\"ignore\\\", sparse_output=False), [\\\"station_id\\\"]),\\n\",\r\n    \"        ('hour',CyclicalEncoder(max_val=24), [\\\"hour\\\"]),\\n\",\r\n    \"        ('day',CyclicalEncoder(max_val=31), [\\\"day\\\"]),\\n\",\r\n    \"    ])\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 168,\r\n   \"id\": \"9075cfb6\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"x_train = transformer.fit_transform(x_train)\\n\",\r\n    \"x_val = transformer.transform(x_val)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 179,\r\n   \"id\": \"3026404f\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/html\": [\r\n       \"<style>#sk-container-id-3 {color: black;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \\\"â–¸\\\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \\\"â–¾\\\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \\\"\\\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \\\"\\\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \\\"\\\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\\\"sk-container-id-3\\\" class=\\\"sk-top-container\\\"><div class=\\\"sk-text-repr-fallback\\\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\\n\",\r\n       \"             colsample_bylevel=None, colsample_bynode=None,\\n\",\r\n       \"             colsample_bytree=None, device=None, early_stopping_rounds=None,\\n\",\r\n       \"             enable_categorical=False, eta=0.1, eval_metric=None,\\n\",\r\n       \"             feature_types=None, gamma=None, grow_policy=None,\\n\",\r\n       \"             importance_type=None, interaction_constraints=None,\\n\",\r\n       \"             learning_rate=None, max_bin=None, max_cat_threshold=None,\\n\",\r\n       \"             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\\n\",\r\n       \"             max_leaves=None, min_child_weight=None, missing=nan,\\n\",\r\n       \"             monotone_constraints=None, multi_strategy=None, n_estimators=100,\\n\",\r\n       \"             n_jobs=None, num_parallel_tree=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\\\"sk-container\\\" hidden><div class=\\\"sk-item\\\"><div class=\\\"sk-estimator sk-toggleable\\\"><input class=\\\"sk-toggleable__control sk-hidden--visually\\\" id=\\\"sk-estimator-id-3\\\" type=\\\"checkbox\\\" checked><label for=\\\"sk-estimator-id-3\\\" class=\\\"sk-toggleable__label sk-toggleable__label-arrow\\\">XGBRegressor</label><div class=\\\"sk-toggleable__content\\\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\\n\",\r\n       \"             colsample_bylevel=None, colsample_bynode=None,\\n\",\r\n       \"             colsample_bytree=None, device=None, early_stopping_rounds=None,\\n\",\r\n       \"             enable_categorical=False, eta=0.1, eval_metric=None,\\n\",\r\n       \"             feature_types=None, gamma=None, grow_policy=None,\\n\",\r\n       \"             importance_type=None, interaction_constraints=None,\\n\",\r\n       \"             learning_rate=None, max_bin=None, max_cat_threshold=None,\\n\",\r\n       \"             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\\n\",\r\n       \"             max_leaves=None, min_child_weight=None, missing=nan,\\n\",\r\n       \"             monotone_constraints=None, multi_strategy=None, n_estimators=100,\\n\",\r\n       \"             n_jobs=None, num_parallel_tree=None, ...)</pre></div></div></div></div></div>\"\r\n      ],\r\n      \"text/plain\": [\r\n       \"XGBRegressor(base_score=None, booster=None, callbacks=None,\\n\",\r\n       \"             colsample_bylevel=None, colsample_bynode=None,\\n\",\r\n       \"             colsample_bytree=None, device=None, early_stopping_rounds=None,\\n\",\r\n       \"             enable_categorical=False, eta=0.1, eval_metric=None,\\n\",\r\n       \"             feature_types=None, gamma=None, grow_policy=None,\\n\",\r\n       \"             importance_type=None, interaction_constraints=None,\\n\",\r\n       \"             learning_rate=None, max_bin=None, max_cat_threshold=None,\\n\",\r\n       \"             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\\n\",\r\n       \"             max_leaves=None, min_child_weight=None, missing=nan,\\n\",\r\n       \"             monotone_constraints=None, multi_strategy=None, n_estimators=100,\\n\",\r\n       \"             n_jobs=None, num_parallel_tree=None, ...)\"\r\n      ]\r\n     },\r\n     \"execution_count\": 179,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"import xgboost as xgb\\n\",\r\n    \"model = xgb.XGBRegressor(objective ='reg:squarederror', n_estimators=100, eta=0.1, seed=42)\\n\",\r\n    \"model.fit(x_train, y_train)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 180,\r\n   \"id\": \"bda14b55\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Root Mean Squared Error: 0.2524761335896847\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"\\n\",\r\n    \"y_pred = model.predict(x_val)\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"from sklearn.metrics import mean_squared_error\\n\",\r\n    \"rmse = mean_squared_error(y_val, y_pred, squared=False)\\n\",\r\n    \"print(f'Root Mean Squared Error: {rmse}')\"\r\n   ]\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3 (ipykernel)\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 3\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython3\",\r\n   \"version\": \"3.11.5\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 5\r\n}\r\n
===================================================================
diff --git a/notebooks/model_v1_quim.ipynb b/notebooks/model_v1_quim.ipynb
--- a/notebooks/model_v1_quim.ipynb	
+++ b/notebooks/model_v1_quim.ipynb	
@@ -24,6 +24,414 @@
    ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 23,
+   "id": "92c4617e",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import pandas as pd\n",
+    "df=pd.read_csv(\"../data/data_csv_bicing/2020_01_Gener_BicingNou_ESTACIONS.csv\")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 8,
+   "id": "48b1f5f7",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "clean_data = pd.read_parquet(\"../data/cleaned_data.parquet\")\n",
+    "station_information = pd.read_csv(\"../data/station_information.csv\")\n",
+    "metadata_sample_submission = pd.read_csv(\"../data/metadata_sample_submission.csv\")\n",
+    "bank_holidays_bcn = pd.read_csv(\"../data/bank_holidays_bcn.csv\")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 9,
+   "id": "e6476e5b",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "merge = clean_data.merge(station_information[[\"station_id\", \"capacity\", \"lat\", \"lon\", \"altitude\"]],\n",
+    "                         on=\"station_id\",\n",
+    "                         how=\"inner\")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 10,
+   "id": "e635af85",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Filter out station_id not in metadata_sample_submission\n",
+    "metadata_station_id_list = metadata_sample_submission[\"station_id\"].unique()\n",
+    "merge = merge[merge[\"station_id\"].isin(metadata_station_id_list)]\n",
+    "\n",
+    "# Ensure that \"num_docks_available\" is not > \"capacity\"\n",
+    "merge.loc[merge[\"num_docks_available\"] > merge[\"capacity\"], \"num_docks_available\"] = merge.loc[merge[\"num_docks_available\"] > merge[\"capacity\"], \"capacity\"]\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 11,
+   "id": "a544a1f9",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Create percentage docks available\n",
+    "merge[\"percentage_docks_available\"] = merge[\"num_docks_available\"] / merge[\"capacity\"]\n",
+    "\n",
+    "# Filter out records before 2020\n",
+    "merge = merge[merge[\"year\"] >= 2020]\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 14,
+   "id": "05909052",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>station_id</th>\n",
+       "      <th>hour</th>\n",
+       "      <th>day</th>\n",
+       "      <th>month</th>\n",
+       "      <th>year</th>\n",
+       "      <th>num_bikes_available</th>\n",
+       "      <th>num_bikes_available_types.mechanical</th>\n",
+       "      <th>num_bikes_available_types.ebike</th>\n",
+       "      <th>num_docks_available</th>\n",
+       "      <th>capacity</th>\n",
+       "      <th>lat</th>\n",
+       "      <th>lon</th>\n",
+       "      <th>altitude</th>\n",
+       "      <th>percentage_docks_available</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>2020</td>\n",
+       "      <td>23.333333</td>\n",
+       "      <td>23.166667</td>\n",
+       "      <td>0.166667</td>\n",
+       "      <td>20.666667</td>\n",
+       "      <td>45</td>\n",
+       "      <td>41.397978</td>\n",
+       "      <td>2.180107</td>\n",
+       "      <td>16.0</td>\n",
+       "      <td>0.459259</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>1</td>\n",
+       "      <td>2020</td>\n",
+       "      <td>25.583333</td>\n",
+       "      <td>22.583333</td>\n",
+       "      <td>3.000000</td>\n",
+       "      <td>17.416667</td>\n",
+       "      <td>45</td>\n",
+       "      <td>41.397978</td>\n",
+       "      <td>2.180107</td>\n",
+       "      <td>16.0</td>\n",
+       "      <td>0.387037</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>3</td>\n",
+       "      <td>1</td>\n",
+       "      <td>2020</td>\n",
+       "      <td>40.416667</td>\n",
+       "      <td>36.500000</td>\n",
+       "      <td>3.916667</td>\n",
+       "      <td>3.583333</td>\n",
+       "      <td>45</td>\n",
+       "      <td>41.397978</td>\n",
+       "      <td>2.180107</td>\n",
+       "      <td>16.0</td>\n",
+       "      <td>0.079630</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>4</td>\n",
+       "      <td>1</td>\n",
+       "      <td>2020</td>\n",
+       "      <td>10.769231</td>\n",
+       "      <td>10.769231</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>33.230769</td>\n",
+       "      <td>45</td>\n",
+       "      <td>41.397978</td>\n",
+       "      <td>2.180107</td>\n",
+       "      <td>16.0</td>\n",
+       "      <td>0.738462</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>5</td>\n",
+       "      <td>1</td>\n",
+       "      <td>2020</td>\n",
+       "      <td>15.750000</td>\n",
+       "      <td>15.500000</td>\n",
+       "      <td>0.250000</td>\n",
+       "      <td>27.250000</td>\n",
+       "      <td>45</td>\n",
+       "      <td>41.397978</td>\n",
+       "      <td>2.180107</td>\n",
+       "      <td>16.0</td>\n",
+       "      <td>0.605556</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>...</th>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>14431557</th>\n",
+       "      <td>103</td>\n",
+       "      <td>23</td>\n",
+       "      <td>28</td>\n",
+       "      <td>12</td>\n",
+       "      <td>2023</td>\n",
+       "      <td>10.000000</td>\n",
+       "      <td>9.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>10.000000</td>\n",
+       "      <td>21</td>\n",
+       "      <td>41.410098</td>\n",
+       "      <td>2.188449</td>\n",
+       "      <td>16.0</td>\n",
+       "      <td>0.476190</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>14431558</th>\n",
+       "      <td>103</td>\n",
+       "      <td>23</td>\n",
+       "      <td>29</td>\n",
+       "      <td>12</td>\n",
+       "      <td>2023</td>\n",
+       "      <td>3.916667</td>\n",
+       "      <td>3.916667</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>15.083333</td>\n",
+       "      <td>21</td>\n",
+       "      <td>41.410098</td>\n",
+       "      <td>2.188449</td>\n",
+       "      <td>16.0</td>\n",
+       "      <td>0.718254</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>14431559</th>\n",
+       "      <td>103</td>\n",
+       "      <td>23</td>\n",
+       "      <td>30</td>\n",
+       "      <td>11</td>\n",
+       "      <td>2023</td>\n",
+       "      <td>3.166667</td>\n",
+       "      <td>1.166667</td>\n",
+       "      <td>2.000000</td>\n",
+       "      <td>15.833333</td>\n",
+       "      <td>21</td>\n",
+       "      <td>41.410098</td>\n",
+       "      <td>2.188449</td>\n",
+       "      <td>16.0</td>\n",
+       "      <td>0.753968</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>14431560</th>\n",
+       "      <td>103</td>\n",
+       "      <td>23</td>\n",
+       "      <td>30</td>\n",
+       "      <td>12</td>\n",
+       "      <td>2023</td>\n",
+       "      <td>4.166667</td>\n",
+       "      <td>4.166667</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>14.833333</td>\n",
+       "      <td>21</td>\n",
+       "      <td>41.410098</td>\n",
+       "      <td>2.188449</td>\n",
+       "      <td>16.0</td>\n",
+       "      <td>0.706349</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>14431561</th>\n",
+       "      <td>103</td>\n",
+       "      <td>23</td>\n",
+       "      <td>31</td>\n",
+       "      <td>12</td>\n",
+       "      <td>2023</td>\n",
+       "      <td>7.000000</td>\n",
+       "      <td>7.000000</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>12.000000</td>\n",
+       "      <td>21</td>\n",
+       "      <td>41.410098</td>\n",
+       "      <td>2.188449</td>\n",
+       "      <td>16.0</td>\n",
+       "      <td>0.571429</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>13188427 rows Ã— 14 columns</p>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "          station_id  hour  day  month  year  num_bikes_available  \\\n",
+       "0                  1     0    1      1  2020            23.333333   \n",
+       "1                  1     0    2      1  2020            25.583333   \n",
+       "2                  1     0    3      1  2020            40.416667   \n",
+       "3                  1     0    4      1  2020            10.769231   \n",
+       "4                  1     0    5      1  2020            15.750000   \n",
+       "...              ...   ...  ...    ...   ...                  ...   \n",
+       "14431557         103    23   28     12  2023            10.000000   \n",
+       "14431558         103    23   29     12  2023             3.916667   \n",
+       "14431559         103    23   30     11  2023             3.166667   \n",
+       "14431560         103    23   30     12  2023             4.166667   \n",
+       "14431561         103    23   31     12  2023             7.000000   \n",
+       "\n",
+       "          num_bikes_available_types.mechanical  \\\n",
+       "0                                    23.166667   \n",
+       "1                                    22.583333   \n",
+       "2                                    36.500000   \n",
+       "3                                    10.769231   \n",
+       "4                                    15.500000   \n",
+       "...                                        ...   \n",
+       "14431557                              9.000000   \n",
+       "14431558                              3.916667   \n",
+       "14431559                              1.166667   \n",
+       "14431560                              4.166667   \n",
+       "14431561                              7.000000   \n",
+       "\n",
+       "          num_bikes_available_types.ebike  num_docks_available  capacity  \\\n",
+       "0                                0.166667            20.666667        45   \n",
+       "1                                3.000000            17.416667        45   \n",
+       "2                                3.916667             3.583333        45   \n",
+       "3                                0.000000            33.230769        45   \n",
+       "4                                0.250000            27.250000        45   \n",
+       "...                                   ...                  ...       ...   \n",
+       "14431557                         1.000000            10.000000        21   \n",
+       "14431558                         0.000000            15.083333        21   \n",
+       "14431559                         2.000000            15.833333        21   \n",
+       "14431560                         0.000000            14.833333        21   \n",
+       "14431561                         0.000000            12.000000        21   \n",
+       "\n",
+       "                lat       lon  altitude  percentage_docks_available  \n",
+       "0         41.397978  2.180107      16.0                    0.459259  \n",
+       "1         41.397978  2.180107      16.0                    0.387037  \n",
+       "2         41.397978  2.180107      16.0                    0.079630  \n",
+       "3         41.397978  2.180107      16.0                    0.738462  \n",
+       "4         41.397978  2.180107      16.0                    0.605556  \n",
+       "...             ...       ...       ...                         ...  \n",
+       "14431557  41.410098  2.188449      16.0                    0.476190  \n",
+       "14431558  41.410098  2.188449      16.0                    0.718254  \n",
+       "14431559  41.410098  2.188449      16.0                    0.753968  \n",
+       "14431560  41.410098  2.188449      16.0                    0.706349  \n",
+       "14431561  41.410098  2.188449      16.0                    0.571429  \n",
+       "\n",
+       "[13188427 rows x 14 columns]"
+      ]
+     },
+     "execution_count": 14,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "merge"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 16,
+   "id": "692f0281",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "merge['datetime'] = pd.to_datetime(merge[['year', 'month', 'day', 'hour']])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 17,
+   "id": "ebd9bb6d",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "0          2020-01-01 00:00:00\n",
+       "1          2020-01-02 00:00:00\n",
+       "2          2020-01-03 00:00:00\n",
+       "3          2020-01-04 00:00:00\n",
+       "4          2020-01-05 00:00:00\n",
+       "                   ...        \n",
+       "14431557   2023-12-28 23:00:00\n",
+       "14431558   2023-12-29 23:00:00\n",
+       "14431559   2023-11-30 23:00:00\n",
+       "14431560   2023-12-30 23:00:00\n",
+       "14431561   2023-12-31 23:00:00\n",
+       "Name: datetime, Length: 13188427, dtype: datetime64[ns]"
+      ]
+     },
+     "execution_count": 17,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "merge['datetime']"
+   ]
+  },
+  {
    "cell_type": "code",
    "execution_count": 4,
    "id": "17b2fe91",
@@ -37,7 +445,7 @@
   {
    "cell_type": "code",
    "execution_count": 5,
-   "id": "9eee92ad",
+   "id": "870f7bab",
    "metadata": {},
    "outputs": [
     {
@@ -419,7 +827,7 @@
   {
    "cell_type": "code",
    "execution_count": 7,
-   "id": "423a41db",
+   "id": "05f64719",
    "metadata": {},
    "outputs": [],
    "source": [
